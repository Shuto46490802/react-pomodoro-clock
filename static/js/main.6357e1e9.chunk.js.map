{"version":3,"sources":["Components/Button.js","Components/Timer.js","Components/BreakLength.js","Components/SessionLength.js","App.js","reportWebVitals.js","index.js"],"names":["Button","props","onClick","handleClick","id","className","children","Timer","style","timerLeft","color","isPlaying","isSession","BreakLength","SessionLength","arrowUp","icon","faArrowUp","arrowDown","faArrowDown","play","faPlay","stop","faStop","reset","faSyncAlt","App","useState","setTimerLeft","sessionLength","setSessionLength","breakLength","setBreakLength","setIsPlaying","setIsSession","intervalId","useRef","countdownTimer","prev","useEffect","minute","Math","floor","second","displayTimer","interval","setInterval","current","onPlay","clearInterval","href","target","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6357e1e9.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"../Button.css\";\n\nconst Button = (props) => {\n\n    return(\n        <div onClick={props.handleClick} id=\"buttons\" className=\"icon\">\n            {props.children}\n        </div>\n    )\n}\n\nexport default Button;","import React, { useState } from \"react\";\nimport \"../Timer.css\"\n\nconst Timer = (props) => {\n\n    const styleBlack = {color : \"#3C403D\"};\n    const styleRed = {color : \"red\"};\n\n    const style = props.timerLeft < 60\n    ? styleRed\n    : styleBlack;\n\n    const className = props.timerLeft < 60 && props.isPlaying\n    ? \"blink\"\n    : \"no-blink\";\n\n    return(\n        <div id=\"timer\">\n            <div id=\"timer-input\"  style={style}> \n            {\n                props.isSession\n                ? \"Session\"\n                : \"Break\"\n            } \n            </div>\n            <div id=\"minute-second\" className={className} style={style}>\n                {props.children}\n            </div>\n        </div>\n    )\n}\n\nexport default Timer;","import React, { useState } from \"react\";\nimport \"../length.css\";\n\nconst BreakLength= (props) => {\n    return(\n        <div id=\"length\">\n            <h3>\n                Break Length\n            </h3>\n            <div id=\"inputs-wrapper\">\n            {props.children}\n            </div>\n        </div>\n    )\n}\n\nexport default BreakLength;","import React, { useState } from \"react\";\nimport \"../length.css\";\n\nconst SessionLength= (props) => {\n    return(\n        <div id=\"length\">\n            <h3>\n                Sesison Length\n            </h3>\n            <div id=\"inputs-wrapper\">\n            {props.children}\n            </div>\n        </div>\n    )\n}\n\nexport default SessionLength;","import React, { useEffect, useState, useRef } from \"react\";\nimport Button from \"./Components/Button\";\nimport Timer from \"./Components/Timer\";\nimport BreakLength from \"./Components/BreakLength\";\nimport SessionLength from \"./Components/SessionLength\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faArrowUp } from '@fortawesome/free-solid-svg-icons';\nimport { faArrowDown } from '@fortawesome/free-solid-svg-icons';\nimport { faPlay } from '@fortawesome/free-solid-svg-icons';\nimport { faStop } from '@fortawesome/free-solid-svg-icons';\nimport { faSyncAlt } from '@fortawesome/free-solid-svg-icons';\nimport \"./App.css\"\n\nconst arrowUp = <FontAwesomeIcon icon={faArrowUp}/>;\nconst arrowDown = <FontAwesomeIcon icon={faArrowDown}/>;\nconst play = <FontAwesomeIcon icon={faPlay}/>;\nconst stop = <FontAwesomeIcon icon={faStop}/>;\nconst reset = <FontAwesomeIcon icon={faSyncAlt}/>;\n\n\nconst App = () => {\n\n  const [timerLeft, setTimerLeft] = useState(1500);\n  const [sessionLength, setSessionLength] = useState(25);\n  const [breakLength, setBreakLength] = useState(5);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [isSession, setIsSession] = useState(true);\n  const intervalId = useRef();\n\n  // Displaying Timer\n  const displayTimer = () => {\n    let minute = Math.floor(timerLeft / 60);\n    let second = Math.floor(timerLeft % 60);\n    if(minute < 10){\n      minute = \"0\" + minute;\n    }if(second === 0 || second < 10){\n      second = \"0\" + second;\n    }\n    return minute + \":\" + second;\n  };\n\n  //Setting sesison length\n  const increaseSessionLength = () => {\n    if(isPlaying){\n      return;\n    }else{\n      if(sessionLength === 60){\n        return;\n      }else{\n        setSessionLength(sessionLength + 1);\n        setTimerLeft((sessionLength * 60) + 60);\n      }\n    }  \n  };\n  const decreaseSessionLength = () => {\n    if(isPlaying){\n      return;\n    }else{\n      if(sessionLength === 1){\n        return;\n      }else{\n        setSessionLength(sessionLength - 1);\n        setTimerLeft((sessionLength * 60) - 60);\n      }\n    }\n   \n  };\n\n  //Setting break length\n  const increaseBreakLength = () => {\n    if(isPlaying){\n      return;\n    }else{\n      if(breakLength === 60){\n        return;\n      }else{\n        setBreakLength(((breakLength * 60) + 60) / 60);\n      }\n    }\n    \n  };\n  const decreaseBreakLength = () => {\n    if(isPlaying){\n      return;\n    }else{\n      if(breakLength === 1){\n        return;\n      }else{\n        setBreakLength(((breakLength * 60) - 60) / 60);\n      }\n    }\n  };\n\n  //Play timer\n  const onPlay = () => {\n    if(isPlaying){\n      return;\n    }else{\n      const interval = setInterval(() => {\n        countdownTimer();\n      }, 1000);\n      intervalId.current = interval;\n      setIsPlaying(true);\n    }\n  };\n\n  const countdownTimer = () => {\n    setTimerLeft(prev => prev -1);\n  };\n\n  //Pause timer\n  const onPause = () => {\n    clearInterval(intervalId.current);\n    setIsPlaying(false);\n  };\n\n  //Reset timer\n  const onReset = () => {\n    clearInterval(intervalId.current);\n    setTimerLeft(1500);\n    setSessionLength(25);\n    setBreakLength(5);\n    setIsPlaying(false);\n    setIsSession(true);\n  };\n\n  //Switching to breaktimer after sesison is out and vice versa\n  useEffect(() => {\n    if(timerLeft === -1){\n      setTimerLeft(breakLength * 60);\n      setIsSession(false);\n      if(!isSession){\n        setTimerLeft(sessionLength * 60);\n        setIsSession(true);\n      }\n    }\n  });\n\n  return(\n    <div id=\"page-wrapper\">\n      <div id=\"pomodoro-clock\">\n        <h1>Pomodoro Clock</h1>\n        <div id=\"length-wrapper\">\n            <BreakLength>\n              <div onClick={decreaseBreakLength} className=\"icon\">\n                {arrowDown}\n              </div>\n              <div className=\"length-input\">\n                {breakLength}\n              </div>\n              <div onClick={increaseBreakLength} className=\"icon\">\n                {arrowUp}\n              </div>\n            </BreakLength>\n            <SessionLength>\n              <div onClick={decreaseSessionLength} className=\"icon\">\n                {arrowDown}\n              </div>\n              <div className=\"length-input\">\n                {sessionLength}\n              </div>\n              <div onClick={increaseSessionLength}  className=\"icon\">\n                {arrowUp}\n              </div>\n            </SessionLength>\n        </div>\n        <div id=\"timer-wrapper\">\n          <Timer isSession={isSession} timerLeft={timerLeft} isPlaying={isPlaying}>\n            {displayTimer()}\n          </Timer>\n        </div>\n        <div id=\"function-button\">\n          <Button handleClick={() => {onPlay()}}>{play}</Button>\n          <Button handleClick={() => {onPause()}}>{stop}</Button>\n          <Button handleClick={() => {onReset()}}>{reset}</Button>\n        </div>\n        </div>\n        <div id=\"footer\">\n          <p>Designed and Coded by</p>\n          <p id=\"name\"><a href=\"https://github.com/Shuto46490802\" target=\"_blank\">Shuto S</a></p>\n        </div>\n      </div>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}